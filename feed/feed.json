{
  "version": "https://jsonfeed.org/version/1",
  "title": "yosssizahn&#39;s tech blog",
  "home_page_url": "https://yossizahn.github.io/",
  "feed_url": "https://yossizahn.github.io/",
  "description": "Interesting tech stuff I encounter.",
  "author": {
    "name": "yossizahn",
    "url": "https://yossizahn.github.io/tech-blog/about/"
  },
  "items": [{
      "id": "https://yossizahn.github.io/posts/mishna-logarithm/",
      "url": "https://yossizahn.github.io/posts/mishna-logarithm/",
      "title": "חשבון הגביה ונפל אחרת (תרומות ה&#39; ז&#39;)",
      "content_html": "<p>איתא במתני' (תרומות פ&quot;ז מ&quot;ב):</p>\n<blockquote>\n<p>סאה תרומה שנפלה למאה, הגביהה ונפלה אחרת הגביהה ונפלה אחרת הרי זו מותרת עד שתרבה תרומה על החולין</p>\n</blockquote>\n<p>ובספר עטרת שאול בסופו (<a href=\"https://hebrewbooks.org/pdfpager.aspx?req=7071&amp;pgnum=144\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link\">קישור</a>):</p>\n<blockquote>\n<p>נשאלתי בווילנא הבירה מאת הגביר החריף ובקי פטיש החזק המפרוסם הרב מהו' שמואל שטראשון בענין המשנה דמסכת תרומות הגביהה ונפלה אחרת וכו' הרי&quot;ז מותרת עד שתרבה תרומה על החולין, ושאל לי החשבון האמיתי מתי יהיה הדבר הזה לדעת רבנן דאין מדמעת אלא לפי חשבון.<br>\nוהשבתי לו בזה הלשון….</p>\n</blockquote>\n<p>מכיון שקשה לעמוד על כוונת מחבר הספר, רציתי לבאר את הדברים היטב עם תרגום המינוחים המתמטיים למינוחים בני ימינו.</p>\n<p>כלל הדברים הוא שהמחבר מביא שתי דרכים שבסופן מגיעים לאותו נוסחה. נבאר את שתי הדרכים הדק היטב בעז&quot;ה.</p>\n<h2 id=\"%D7%97%D7%99%D7%A9%D7%95%D7%91-%D7%A9%D7%99%D7%A2%D7%95%D7%A8-%D7%94%D7%AA%D7%A8%D7%95%D7%9E%D7%94-%D7%A9%D7%A0%D7%A4%D7%9C%D7%94\" tabindex=\"-1\">חישוב שיעור התרומה שנפלה <a class=\"external-link\" href=\"#%D7%97%D7%99%D7%A9%D7%95%D7%91-%D7%A9%D7%99%D7%A2%D7%95%D7%A8-%D7%94%D7%AA%D7%A8%D7%95%D7%9E%D7%94-%D7%A9%D7%A0%D7%A4%D7%9C%D7%94\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h2>\n<p>כשנחשוב לעצמנו כמה תרומה נוספה לכרי נגיע למסקנה זו:<br>\nבכל איטרציה של נפילה/הגבהה אתה מוסיף לכרי סאה אחת של תרומה, ואז מגביה מהכרי שיעור $\\frac{1}{101}$ מתוך הסאה הנוספת וכל הסאים שבאו לפניה.<br>\nיוצא אם כן, שבנפילה האחרונה, שנקרא לה נפילה מספר $n$, נפלו סה&quot;כ לתוך הכרי:</p>\n<ul>\n<li>$\\frac{100}{101}$ (מהנפילה האחרונה)</li>\n<li>$\\frac{100}{101}\\times\\frac{100}{101}$ (מהנפילה שלפני האחרונה)</li>\n<li>$\\frac{100}{101}\\times\\frac{100}{101}\\times\\frac{100}{101}$</li>\n<li>…. (וכן הלאה עבור כל נפילה עד הראשונה ששיעורו:)</li>\n<li>$\\frac{100}{101}\\times\\cdots\\times\\frac{100}{101}$ (כמספר הנפילות)</li>\n</ul>\n<p>במינוח המתמטי המודרני הסדרה הזאת של מספרים נקראת &quot;סדרה הנדסאית&quot; והסה&quot;כ של חיבור כל המספרים מהסדרה נקרא &quot;טור הנדסאי&quot;</p>\n<blockquote>\n<p>כל סדרה של מספרים שהמעבר ממספר למספר כרוך בפעולת כפל עם ערך קבוע (במקרה שלנו זה כפל ב-$\\frac{100}{101}$) נקרא &quot;סדרה הנדסאית&quot;. (עיין וויקיפדיה הטעם לשם זה).<br>\nבאנגלית זה נקרא Geometric Sequence ובלשון הספר עטרת שאול זה נקרא &quot;חרוזה מדידית&quot; (התרגום של גיאומטריה הוא &quot;מדידת קרקע&quot; - מובן אם כן למה הוא קורא לזה &quot;חרוזה מדידית&quot; כמו המונח האנגלי המקובל שמן הסתם מתאים למונח בשפות אחרות)</p>\n</blockquote>\n<p>בתחביר יותר מקובל זה נכתב כך:</p>\n<p>$$<br>\n\\left(\\dfrac{100}{101}\\right)+\\left(\\dfrac{100}{101}\\right)^2+\\cdots+\\left(\\dfrac{100}{101}\\right)^{n}<br>\n$$</p>\n<blockquote>\n<p>ובקיצור (למי שמכיר את הסימון):</p>\n</blockquote>\n<p>$$<br>\n\\sum_{k=1}^{n}\\left(\\frac{100}{101}\\right)^{k}<br>\n$$</p>\n<p>לשם הנוחות אני אתחיל להשתמש באות $r$ מעתה במקום השבר $\\frac{100}{101}$</p>\n<p>הנוסחה הסופית שלנו (לבינתיים) היא:</p>\n<p>$$<br>\nr+r^2+\\cdots+r^n<br>\n$$</p>\n<p>אז השאלה היא איך מקבלים את הסה&quot;כ של טור הנדסאית?</p>\n<p>למרבה המזל 😅 יש דרך קלה ונקייה לחשב את הסה&quot;כ של הטור בלי להסתבך בשברים מסובכים, צריך רק קצת אלגברה…</p>\n<p>השיטה היא כזאת:<br>\nניקח את כל הסדרה אותה כ: $S_n$:</p>\n<p>$$<br>\nS_n=r+r^2+\\cdots+r^n<br>\n$$</p>\n<p>עכשיו ניצור עוד סידרה שערכה $S_n\\times{r}$ (כל ערך בסדרה המקורית נכפל ב-$r$) בסדרה החדשה:</p>\n<p>$$<br>\nrS_n=r^2+r^3+\\cdot+r^{n+1}<br>\n$$</p>\n<p>עכשיו נחסר את הסידרה השניה מהראשונה, ונקבל משוואה זו:</p>\n<p>$$<br>\nS_n-rS_n=\\left(r+r^2+\\cdots+r^n\\right)-\\left(r^2+r^3+\\cdot+r^{n+1}\\right)<br>\n$$</p>\n<p>עכשיו שימו לב: עבור כל ערך של הסדרה הראשונה יש מולו ערך בסדרה השניה ש&quot;מחסל&quot; אותו ($r^2-r^2=0$) חוץ מהערך הראשון של הסדרה הראשונה והערך האחרון של הסדרה השניה. נשארנו עם משוואה כזאת:</p>\n<p>$$<br>\nS_n-rS_n=r-r^{n+1}<br>\n$$</p>\n<p>עכשיו נפשט את הנוסחה קצת על ידי הוצאת הגורם המשותף בכל אחד משני הצדדים, נקבל:</p>\n<p>$$<br>\nS_n(1-r)=r-r(1-r^n)<br>\n$$</p>\n<p>עכשיו נבודד את ה-$S_n$ לצד אחד על ידי חילוק שני הצדדים ב- $1-r$, קיבלנו:</p>\n<p>$$<br>\nS_n=\\frac{r(1-r^n)}{1-r}<br>\n$$</p>\n<p>עכשיו נכניס חזרה את הערך של $r$ במקום האות, קיבלנו:</p>\n<p>$$<br>\nS_n=\\dfrac{\\dfrac{100}{101}\\cdot\\left(1-\\left(\\dfrac{100}{101}\\right)^n\\right)}{1-\\dfrac{100}{101}}<br>\n$$</p>\n<p>את זה אפשר לפשט יותר על ידי כמה פעולות אלגבריות<br>\nא. נחליף את $1-\\frac{100}{101}$ בתוצאה: $\\frac{1}{100}$<br>\nב. אפשר להמיר פעולת חלוקה בפעולת כפל של ההופכי, קיבלנו:</p>\n<p>$$<br>\nS_n=\\dfrac{100}{101}\\cdot\\left(1-\\left(\\dfrac{100}{101}\\right)^n\\right)\\cdot{101}<br>\n$$</p>\n<p>ג. אפשר שוב לפשט יותר:</p>\n<p>$$<br>\nS_n=\\dfrac{100}{\\cancel{101}}\\cdot\\left(1-\\left(\\dfrac{100}{101}\\right)^n\\right)\\cdot{\\cancel{101}}<br>\n$$</p>\n<p>קיבלנו:</p>\n<p>$$<br>\n100\\cdot\\left(1-\\left(\\dfrac{100}{101}\\right)^n\\right)<br>\n$$</p>\n<h2 id=\"%D7%97%D7%99%D7%A9%D7%95%D7%91-%D7%90%D7%97%D7%A8%D7%99-%D7%9B%D7%9E%D7%94-%D7%A4%D7%A2%D7%9E%D7%99%D7%9D-%D7%A0%D7%92%D7%99%D7%A2-%D7%9C%D7%A8%D7%95%D7%91-%D7%94%D7%9B%D7%A8%D7%99\" tabindex=\"-1\">חישוב אחרי כמה פעמים נגיע לרוב הכרי <a class=\"external-link\" href=\"#%D7%97%D7%99%D7%A9%D7%95%D7%91-%D7%90%D7%97%D7%A8%D7%99-%D7%9B%D7%9E%D7%94-%D7%A4%D7%A2%D7%9E%D7%99%D7%9D-%D7%A0%D7%92%D7%99%D7%A2-%D7%9C%D7%A8%D7%95%D7%91-%D7%94%D7%9B%D7%A8%D7%99\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h2>\n<p>עכשיו ננסה למצוא פתרון באיזה $n$ יהיה התוצאה מעל ל $50$ (= יש יותר מ-50 סאה תרומה)<br>\nאז ניצור משוואה זו:</p>\n<p>$$<br>\n100\\cdot\\left(1-\\left(\\dfrac{100}{101}\\right)^n\\right)\\gt50<br>\n$$</p>\n<p>ננסה לבודד את ה $n$ בצד אחד:<br>\nא. נחלק שני הצדדים ב-100:</p>\n<p>$$<br>\n\\dfrac{100\\cdot\\left(1-\\left(\\dfrac{100}{101}\\right)^n\\right)}{100}\\gt\\dfrac{50}{100}<br>\n$$</p>\n<p>ב. הפשטה:</p>\n<p>$$<br>\n\\dfrac{\\cancel{100}\\cdot\\left(1-\\left(\\dfrac{100}{101}\\right)^n\\right)}{\\cancel{100}}\\gt\\dfrac{\\cancel{50}}{\\cancel{100}} = \\dfrac{1}{2}<br>\n$$</p>\n<p>קיבלנו:</p>\n<p>$$<br>\n1-\\left(\\dfrac{100}{101}\\right)^n\\gt\\dfrac{1}{2}<br>\n$$</p>\n<p>ג. נוריד $1$ משני הצדדים:</p>\n<p>$$<br>\n-\\left(\\dfrac{100}{101}\\right)^n\\gt-\\dfrac{1}{2}<br>\n$$</p>\n<p>ד. נחליף את השלילי לחיובי על ידי כפל ב $-1$ ושינוי כיוון המשוואה:</p>\n<p>$$<br>\n\\left(\\dfrac{100}{101}\\right)^n\\lt\\dfrac{1}{2}<br>\n$$</p>\n<p>ה. עכשיו כדי לבודד את ה $n$ נשתמש בפונקצית $log$ (הסבר תמציתי: בהינתן: $a^b=n$ אז $log_b(n)=a$, כלומר: פעולת $log$ עונה על השאלה &quot;$b$ בחזקת מה שווה ל $n$?&quot;)<br>\nקיבלנו:</p>\n<p>$$<br>\nn&lt;log_{\\frac{100}{101}}\\left(\\frac{1}{2}\\right)<br>\n$$</p>\n<p>ו. לשלב הזה צריך להשתמש במחשבון מדעי… אבל במחשבון אין כפתור עבור $log_{\\frac{100}{101}}$. אז נשתמש בנוסחה להמרת הבסיס של הלוגריתם:</p>\n<p>$$<br>\nn\\lt\\dfrac{ln(0.5)}{ln\\left(\\dfrac{100}{101}\\right)}\\approx69.66<br>\n$$</p>\n<p>זהו! הגענו לתשובה שאחרי $\\approx69.66$ יש רוב של תרומה.</p>\n<h2 id=\"%D7%94%D7%A9%D7%99%D7%98%D7%94-%D7%94%D7%A9%D7%A0%D7%99%D7%94\" tabindex=\"-1\">השיטה השניה <a class=\"external-link\" href=\"#%D7%94%D7%A9%D7%99%D7%98%D7%94-%D7%94%D7%A9%D7%A0%D7%99%D7%94\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h2>\n<p>בעטרת שאול הנ&quot;ל הוא עומד על זה שיש שיטה הרבה יותר פשוטה להגיע לאותו חישוב.<br>\nהרעיון הוא פשוט מאוד: במקום לחשוב על התרומה שנפלה נחשוב על החולין.<br>\nאחרי כל איטרציה של נפילה/הגבהה החולין יורד בסך: $\\frac{1}{101}$<br>\nאם כן אחרי $n$ נפילות, הסך של החולין שנשאר הוא:</p>\n<p>$$<br>\n100\\times\\left(\\dfrac{100}{101}\\right)^n<br>\n$$</p>\n<p>מיד אפשר לנו להגיע למשוואה כזו שמציין את נקודת הזמן שהחולין פחות מחצי הכרי:</p>\n<p>$$<br>\n100\\times\\left(\\dfrac{100}{101}\\right)^n&lt;50<br>\n$$</p>\n<p>נחלק כל צד במאה:</p>\n<p>$$<br>\n\\dfrac{\\cancel{100}\\times\\left(\\dfrac{100}{101}\\right)^n}{\\cancel{100}}\\lt\\dfrac{\\cancel{50}}{\\cancel{100}} = \\dfrac{1}{2}<br>\n$$</p>\n<p>והנה הגענו שוב לאותה משוואה שהיה לנו מקודם:</p>\n<p>$$<br>\n\\left(\\dfrac{100}{101}\\right)^n\\lt\\dfrac{1}{2}<br>\n$$</p>\n<p>באמת קצת פלא בעיני שהעטרת שאול טורח לעשות את החישוב של טור הנדסאי שיותר מסובך במקום החישוב הפשוט יותר</p>\n",
      "date_published": "2025-08-19T00:00:00Z"
    },{
      "id": "https://yossizahn.github.io/posts/split-sort/",
      "url": "https://yossizahn.github.io/posts/split-sort/",
      "title": "“Split sort” with some bit twiddling",
      "content_html": "<h2 id=\"what-is-a-%E2%80%9Csplit-sort%E2%80%9D\" tabindex=\"-1\">What is a “split sort” <a class=\"external-link\" href=\"#what-is-a-%E2%80%9Csplit-sort%E2%80%9D\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h2>\n<p>It all started with an innocent question posted on a small chat group. The poster wanted to sort a list of numbers in ascending order but with a twist: the ascension should start from a specific cutoff point, after reaching the highest number, the list should go back and list from the lowest number up to the cutoff point.<br>\nI will call this “split sort” for lack of a better term.</p>\n<p>Some code to demonstrate:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sortFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">cutoff</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token function\">sortFn</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [5,6,7,8,9,10,1,2,3,4]</span></code></pre>\n<p>The question is how to implement <code>sortFn</code>.</p>\n<h2 id=\"the-simple-solution\" tabindex=\"-1\">The simple solution <a class=\"external-link\" href=\"#the-simple-solution\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h2>\n<p>After some consideration most people would come up with code similar to this:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sortFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">cutoff</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">>=</span> cutoff <span class=\"token operator\">&amp;&amp;</span> b <span class=\"token operator\">>=</span> cutoff <span class=\"token operator\">||</span> a <span class=\"token operator\">&lt;</span> cutoff <span class=\"token operator\">&amp;&amp;</span> b <span class=\"token operator\">&lt;</span> cutoff<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> b <span class=\"token operator\">-</span> a\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><em>In words:</em></p>\n<blockquote>\n<p>If both numbers are either before of after the cutoff point -&gt; sort ascending, otherwise, i.e. the 2 numbers live on differing sides of the cutoff point -&gt; sort descending.</p>\n</blockquote>\n<p>This is not too bad. Fairly elegant.<br>\nBut it it got me thinking: The normal numerical sort can be done with a mathematical expression with no conditionals, can “split sort” also be done without using any conditionals? 🤔</p>\n<h2 id=\"the-%E2%80%9Cclever%E2%80%9D-solution\" tabindex=\"-1\">The “clever” solution <a class=\"external-link\" href=\"#the-%E2%80%9Cclever%E2%80%9D-solution\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h2>\n<p>After some thought I came up with this solution I would like to share.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sortFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">cutoff</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">(</span>a <span class=\"token operator\">-</span> cutoff <span class=\"token operator\">^</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">-</span> cutoff <span class=\"token operator\">^</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"how-does-it-work%3F\" tabindex=\"-1\">How does it work? <a class=\"external-link\" href=\"#how-does-it-work%3F\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h2>\n<p>I first started out by trying to simplify the problem. I came up with the following:</p>\n<p>Let us deduct <code>cutoff</code> from each number in the list. This will give us a list where all numbers above <code>cutoff</code> are positive and all numbers below are negative.<br>\nThis allows us to rephrase the problem as follows:</p>\n<blockquote>\n<p>Sort the list in ascending order, but consider all negatives to be of higher value than positives.</p>\n</blockquote>\n<p>This rephrase lit up a light bulb in my head 💡.</p>\n<h2 id=\"2's-complement\" tabindex=\"-1\">2's complement <a class=\"external-link\" href=\"#2's-complement\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h2>\n<p>As developers we all have run into the situation where a signed integer overflows and suddenly your very large positive number becomes a very low negative number 🤕.<br>\ne.g. adding 1 to the maximum value that an <code>int32</code> can hold (2147483647) will return -2147483648. This is due to the way modern computers store signed numbers using the <a href=\"https://en.wikipedia.org/wiki/Two's_complement\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link\">Two’s complement</a>) system.</p>\n<p>Let us look at the bit layout of signed integers using the 2’s complement system. For simplicity we will look at a single byte number (I am assuming the reader is familiar with the basic binary counting system so I won’t explaining how bit patterns represent values):</p>\n<ul>\n<li>Zero value: <code>00000000</code></li>\n<li>Lowest positive number: <code>00000001</code>. The zeroed out leftmost bit (the “sign bit”) is a flag that tells us that this is a positive number. The seven other bits represent the value which is <code>1</code> in this case.</li>\n<li>Highest positive number: <code>01111111</code> . The zeroed out leftmost bit (the “sign bit”) is a flag that tells us that this is still a positive number, the seven remaining bits represent the number <code>127</code>, the highest number a signed byte can represent.</li>\n<li>Lowest negative number: <code>10000000</code>. The first bit is set to <code>1</code> to signify a negative number. The other bits are set to zero, this represents the lowest negative number a signed byte can represent: <code>-128</code> (the lowest negative is always equal to the highest positive + <code>1</code>). Each successive bit pattern represents the next negative number until we climb back up to zero. The fact the zero lives on the positive side of the fence allows 1 more negative magnitude than positive.</li>\n</ul>\n<h3 id=\"what-does-all-this-mean-for-us%3F\" tabindex=\"-1\">What does all this mean for us? <a class=\"external-link\" href=\"#what-does-all-this-mean-for-us%3F\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h3>\n<p>We all know that negative numbers have a lower value than positive numbers, and so does the computer’s processor. But… the exact same bits can also represent an <em>unsigned number</em> and then... the previously low negative numbers will suddenly become high value positive numbers 😲. The computer’s CPU also knows that. The CPU knows how to do signed math and unsigned math.</p>\n<p>In other words: (when peering through “unsigned glasses 😎”) negative numbers begin from where positive numbers end…</p>\n<h3 id=\"casting-attempts\" tabindex=\"-1\">Casting attempts <a class=\"external-link\" href=\"#casting-attempts\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h3>\n<p>That leads us to the following thought:</p>\n<blockquote>\n<p>How about if we convince the processor to look at our numbers as unsigned integers just for the purpose of determining the order?</p>\n</blockquote>\n<p>Attempting this is not really possible in Javascript. The language doesn’t give us the facilities to tell the processor how to interpret a number.<br>\nWould it work in another language? Say C#?</p>\n<h4 id=\"attempt-1%3A\" tabindex=\"-1\">Attempt 1: <a class=\"external-link\" href=\"#attempt-1%3A\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h4>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> arr <span class=\"token operator\">=</span> Enumerable<span class=\"token punctuation\">.</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token return-type class-name\">Comparison<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">comparison</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> startFrom<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> aPrime <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">uint</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">-</span> startFrom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bPrime <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">uint</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">-</span> startFrom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> aPrime <span class=\"token operator\">-</span> bPrime<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ❗CS0266 Cannot implicitly convert type 'uint' to 'int'.</span>\n<span class=\"token comment\">// An explicit conversion exists (are you missing a cast?)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\narr<span class=\"token punctuation\">.</span><span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span><span class=\"token function\">comparison</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Uh oh. <code>Comparison</code> needs to return an <code>int</code>. Obviously 🤦. It needs to have a way of returning <code>-1</code>.<br>\nOk, let’s cast the result back to an <code>int</code>:</p>\n<h4 id=\"attempt-2%3A\" tabindex=\"-1\">Attempt 2: <a class=\"external-link\" href=\"#attempt-2%3A\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h4>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token return-type class-name\">Comparison<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">comparison</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> startFrom<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> aPrime <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">uint</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">-</span> startFrom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bPrime <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">uint</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">-</span> startFrom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>aPrime <span class=\"token operator\">-</span> bPrime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This looks like it should work. I still doesn’t. After some <s>thought</s> debugging the obvious answer presents itself: <code>a</code> and <code>b</code> are <em>unsigned</em>. If <code>a - b</code> results in a negative number we have an integer underflow…<br>\nOk, let’s recast back to an <code>int</code> after interpreting the bits as a <code>uint</code>.</p>\n<h4 id=\"attempt-3%3A\" tabindex=\"-1\">Attempt 3: <a class=\"external-link\" href=\"#attempt-3%3A\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h4>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token return-type class-name\">Comparison<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">comparison</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> startFrom<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> aPrime <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">-</span> startFrom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bPrime <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">-</span> startFrom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> aPrime <span class=\"token operator\">-</span> bPrime<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nope. A large positive <code>uint</code> (which is what happens to our negative numbers) will revert back to negative because of that pesky sign bit.</p>\n<p>How about if we recast to a <code>long</code>? That should work.. 🤔</p>\n<h4 id=\"attempt-4%3A\" tabindex=\"-1\">Attempt 4: <a class=\"external-link\" href=\"#attempt-4%3A\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h4>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token return-type class-name\">Comparison<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">comparison</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> startFrom<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> aPrime <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">-</span> startFrom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bPrime <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">-</span> startFrom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>aPrime <span class=\"token operator\">-</span> bPrime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Ah, but the sort function needs to return an <code>int</code>. Now that the result of the subtraction is a <code>long</code> , if we cast the answer back to an <code>int</code> we loose the sign bit.<br>\nIn short: I couldn’t get this path to work without adding a conditional which defeats the whole point of the exercise.</p>\n<h2 id=\"transposing\" tabindex=\"-1\">Transposing <a class=\"external-link\" href=\"#transposing\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h2>\n<p>Here’s a different idea:<br>\nIf we flip the sign bit of the original numbers, we can transpose a negative number into the positive realm and vice versa for positive numbers. Note: This is <em>transposition</em> not <em>negation</em> i.e. the number moves 2147483648 positions up or down the scale, without preserving its <em>magnitude</em> (1 becomes -2147483647).</p>\n<h3 id=\"javascript%E2%80%99s-numbers\" tabindex=\"-1\">Javascript’s <code>Number</code>s <a class=\"external-link\" href=\"#javascript%E2%80%99s-numbers\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h3>\n<p>In Javascript <em>all</em> numbers are represented as 64 bit floating point numbers. However, when doing binary bitwise operations the number is first coerced to a 32 bit integer.<br>\nThe coercion will preserve the valence (“sign”) but truncate the the value to 32 bits.<br>\nAfter the operation, the resulting bits are converted back into 64 bit floating point numbers again preserving the valence.<br>\nAll mathematical operations operate on the resulting 64 bit number.</p>\n<h3 id=\"the-solution\" tabindex=\"-1\">The solution <a class=\"external-link\" href=\"#the-solution\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h3>\n<p>Let us exploit this to solve our problem. To recap: We want to sort numbers in ascending order, but considering all negative numbers as higher valued than positive numbers.</p>\n<p>To do this I came up with the above method. Let us step through the code:</p>\n<ul>\n<li><code>a - cutoff</code> - deduct the value of <code>cutoff</code> from the original number.</li>\n<li><code>1 &lt;&lt; 31</code> - create a 32 bit pattern (mask) where only the leftmost bit is set to one (remember: bitwise operations operate on 32 bits).</li>\n<li>Take the right and left values and smush them together (that’s a technical term 😉) using the XOR operator. This has the effect of flipping the sign bit while leaving the other bits alone.</li>\n<li>Do this to both <code>a</code> and <code>b</code></li>\n<li>Do a mathematical operation (minus) on the numbers, this will coerce the bit pattern back into a number, <em>respecting the sign bit</em><br>\nHaving flipped the sign bit, this will transpose a negative number from the negative realm to the positive realm and vice versa for positive numbers.</li>\n<li>Seeing as the previously negative numbers now have a higher value than the previous positive numbers, we can go ahead and use the regular <code>a - b</code></li>\n</ul>\n<h3 id=\"in-c%23\" tabindex=\"-1\">In C# <a class=\"external-link\" href=\"#in-c%23\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h3>\n<p>Here is a slightly messier C# version:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token return-type class-name\">Comparison<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">comparison</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> startFrom<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">-</span> startFrom <span class=\"token operator\">^</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span>\n      <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">-</span> startFrom <span class=\"token operator\">^</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The end :)</p>\n",
      "date_published": "2023-07-16T00:00:00Z"
    },{
      "id": "https://yossizahn.github.io/posts/is-2-days-ago-beautiful/",
      "url": "https://yossizahn.github.io/posts/is-2-days-ago-beautiful/",
      "title": "Is `2.days.ago` a beautiful way of expressing a relative date?",
      "content_html": "<p>A common scenario: You need to calculate a date as a value relative to the current date.</p>\n<p>Using the popular (albeit <a href=\"https://momentjs.com/docs/#/-project-status/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link\">somewhat deprecated</a>) <a href=\"https://momentjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link\">moment.js</a>, this can be expressed as follows:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> twoDaysAgo <span class=\"token operator\">=</span> <span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'days'</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Nice. Readable. Sufficient.</p>\n<p>I came across this curious Ruby snippet recently:</p>\n<pre class=\"language-ruby\"><code class=\"language-ruby\">user <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>\n  <span class=\"token symbol\">email</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'user@example.com'</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token symbol\">trial_ends_at</span><span class=\"token operator\">:</span> <span class=\"token number\">30.</span>days<span class=\"token punctuation\">.</span>from_now\n<span class=\"token punctuation\">)</span></code></pre>\n<p>Ruby on Rails users may find this code somewhat familiar. For me this came as a big surprise.</p>\n<p>After the initial double take, I tried understanding how this code actually works.<br>\n<em>There is no way that Ruby-core offers <code>days</code> as a method on integers. That would just be too ludicrous to imagine.</em></p>\n<p>Turns out, that Ruby allows (encourages?) extending native types, <em>and</em> this seems to be a popular practice. Whereas in JS land - where I live - it is generally frowned upon, in Ruby (on Rails?) it seems to be the norm to extend native types. There is even a utility library specifically for this purpose named <a href=\"https://guides.rubyonrails.org/active_support_core_extensions.html\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link\">Active Support</a>.</p>\n<p>So... the <code>days</code> extension-method of integers, returns a <code>Duration</code> object. And duration objects apparently have an <code>ago</code> method, which returns a <code>Date</code> which is offset <code>$duration</code> amount of time into the past. Exhilarating? Beautiful?</p>\n<p>Listen to what DHH (David Heinemeier Hansson, the creator of RoR) <a href=\"https://rubyonrails.org/doctrine/#optimize-for-programmer-happiness:~:text=But%20both%20decisions%20still%2C%20to%20this,Rails%20after%2012%20years%20of%20service.\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link\">has to say</a> about this style of coding:</p>\n<blockquote>\n<p>... both decisions still, to this day, make me smile. I relish getting to write <code>people.third</code> in a test case or the console. No, that’s not logical. It’s not efficient. It may even be pathological. But it continues to make me smile, thus fulfilling the principle and enriching my life, helping to justify my continued involvement with Rails after 12 years of service.</p>\n</blockquote>\n<p>Okay... <code>¯\\_(ツ)_/¯</code></p>\n<p>In my opinion this style of coding is not only bad, it is also <em>less readable and in a certain sense uglier</em>. &quot;Why?&quot; you may ask. Well in my mind, code is not prose. Code was never intended to be prose. And code that masquerades as prose requires more mental energy to translate it back into the code that it really is.</p>\n<p>Disagree? You're welcome... Let me know in the comments. (Oops... no comments yet...)</p>\n<h2 id=\"update-2023-07-16\" tabindex=\"-1\">Update 2023-07-16 <a class=\"external-link\" href=\"#update-2023-07-16\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h2>\n<p>Since I wrote this post <code>2.years.ago</code> 😉 I have become familiar with Smalltalk and clearly Ruby has inherited much from Smalltalk. <a href=\"https://pharo.org/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link\">Pharo Smalltalk</a> has a method <code>days</code> on numbers which returns a <code>Duration</code>. The <code>ago</code> extension seems to be unique to RoR though.</p>\n",
      "date_published": "2021-03-14T00:00:00Z"
    },{
      "id": "https://yossizahn.github.io/posts/favourite-tools/",
      "url": "https://yossizahn.github.io/posts/favourite-tools/",
      "title": "My favorite tools",
      "content_html": "<h2 id=\"introduction\" tabindex=\"-1\">Introduction <a class=\"external-link\" href=\"#introduction\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h2>\n<p>I will try to keep an updated list of my favorite tools here.</p>\n<p>It will be split as follows:</p>\n<ul>\n<li>Tools that I want to give a massive shout-out for. These are tools that I think are amazing and more people should know about them and use them. I will add to each item a short description and some reasons why I like them so much.</li>\n<li>This will be followed by a list of tools I use, grouped by category. These tools are chosen by me as the best in category for the job I use them for. However they are either already very well-known, or just not good enough to deserve a massive shout out.</li>\n</ul>\n<p>Let's start!</p>\n<h2 id=\"big-shout-out-for-these-tools-%F0%9F%93%A2\" tabindex=\"-1\">Big shout out for these tools 📢 <a class=\"external-link\" href=\"#big-shout-out-for-these-tools-%F0%9F%93%A2\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h2>\n<p>These are tools that I think are amazing and more people should know about them and use them. The tools are listed in no particular order.</p>\n<h3 id=\"pdf-xchange-editor-(freemium)\" tabindex=\"-1\"><a href=\"https://www.tracker-software.com/product/pdf-xchange-editor\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link\">PDF-Xchange Editor</a> (Freemium) <a class=\"external-link\" href=\"#pdf-xchange-editor-(freemium)\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h3>\n<p><a href=\"https://www.tracker-software.com/product/pdf-xchange-editor\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link\">PDF-Xchange Editor</a> from <a href=\"https://www.tracker-software.com/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link\">Tracker Software</a> is hands-down my favorite PDF Editor.</p>\n<p>I like it because:</p>\n<ul>\n<li>It is pretty, light-weight, featureful and very easy to use.</li>\n<li>It is actively maintained &amp; developed.</li>\n<li>Tracker's customer support is something I have not seen anywhere else. The support personal are  knowledgeable, friendly and very responsive. No question in the <a href=\"https://forum.tracker-software.com/viewforum.php?f=50\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link\">support forum</a> is left unanswered, no email is ignored. Just overall amazing.</li>\n<li>They have a buy-once licensing scheme instead of a subscription model.</li>\n</ul>\n<h3 id=\"everything-(free%2C-proprietary)\" tabindex=\"-1\"><a href=\"https://www.voidtools.com/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link\">Everything</a> (Free, Proprietary) <a class=\"external-link\" href=\"#everything-(free%2C-proprietary)\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h3>\n<p><a href=\"https://www.voidtools.com/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link\">Everything</a> is an amazing file search tool from <a href=\"https://www.voidtools.com/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link\">voidtools</a>. Now, I would have thought (and still do think so...) that Everything is a terrible name for a tool (&quot;Hey, have you heard of everything?&quot;, &quot;Heard of what??? 😕&quot;). But apparently it is good enough to come out first in a <a href=\"https://www.google.com/search?q=Everything\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link\">Google search</a> for the word &quot;everything&quot;.</p>\n<p>My favorite use for it, is something it wasn't designed for. I</p>\n<p>I like it because:</p>\n<ul>\n<li>It is very light-weight, extremely fast and very featureful.</li>\n<li>It is actively maintained and seems to be of very high quality code.</li>\n</ul>\n<h3 id=\"process-hacker-(open-source)\" tabindex=\"-1\"><a href=\"https://processhacker.sourceforge.io/nightly.php\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link\">Process Hacker</a> (Open source) <a class=\"external-link\" href=\"#process-hacker-(open-source)\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h3>\n<h3 id=\"ranger-(open-source)\" tabindex=\"-1\"><a href=\"https://ranger.github.io/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link\">Ranger</a> (Open source) <a class=\"external-link\" href=\"#ranger-(open-source)\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h3>\n<h3 id=\"fork-(proprietary)\" tabindex=\"-1\"><a href=\"https://fork.dev/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link\">Fork</a> (Proprietary) <a class=\"external-link\" href=\"#fork-(proprietary)\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h3>\n<h3 id=\"windows-terminal-(open-source)\" tabindex=\"-1\">Windows Terminal (Open source) <a class=\"external-link\" href=\"#windows-terminal-(open-source)\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h3>\n<h2 id=\"mini-shout-out-for-these%3A\" tabindex=\"-1\">Mini shout out for these: <a class=\"external-link\" href=\"#mini-shout-out-for-these%3A\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h2>\n<h3 id=\"7-zip\" tabindex=\"-1\">7-zip <a class=\"external-link\" href=\"#7-zip\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h3>\n<h3 id=\"clink\" tabindex=\"-1\">Clink <a class=\"external-link\" href=\"#clink\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h3>\n<h3 id=\"tableplus\" tabindex=\"-1\">TablePlus <a class=\"external-link\" href=\"#tableplus\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h3>\n<h3 id=\"paint.net\" tabindex=\"-1\"><a href=\"http://Paint.net\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link\">Paint.net</a> <a class=\"external-link\" href=\"#paint.net\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h3>\n<h2 id=\"the-full-unabridged-list-of-stuff-i-use\" tabindex=\"-1\">The full unabridged list of stuff I use <a class=\"external-link\" href=\"#the-full-unabridged-list-of-stuff-i-use\" target=\"_blank\" rel=\"noopener noreferrer\">#</a></h2>\n<p><em>to be continued...</em></p>\n",
      "date_published": "2021-03-13T00:00:00Z"
    },{
      "id": "https://yossizahn.github.io/posts/hello-world/",
      "url": "https://yossizahn.github.io/posts/hello-world/",
      "title": "Hi 👋",
      "content_html": "<p>An empty post...<br>\nOne day I may write something...</p>\n",
      "date_published": "2021-03-11T00:00:00Z"
    }
  ]
}
