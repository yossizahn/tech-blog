{
  "version": "https://jsonfeed.org/version/1",
  "title": "yosssizahn&#39;s tech blog",
  "home_page_url": "https://yossizahn.github.io/",
  "feed_url": "https://yossizahn.github.io/",
  "description": "Interesting tech stuff I encounter.",
  "author": {
    "name": "yossizahn",
    "url": "https://yossizahn.github.io/tech-blog/about/"
  },
  "items": [{
      "id": "https://yossizahn.github.io/tech-blog/posts/split-sort/",
      "url": "https://yossizahn.github.io/tech-blog/posts/split-sort/",
      "title": "‚ÄúSplit sort‚Äù with some bit twiddling",
      "content_html": "<h2 id=\"what-is-a-%E2%80%9Csplit-sort%E2%80%9D\" tabindex=\"-1\">What is a ‚Äúsplit sort‚Äù <a class=\"direct-link\" href=\"#what-is-a-%E2%80%9Csplit-sort%E2%80%9D\">#</a></h2>\n<p>It all started with an innocent question posted on a small chat group. The poster wanted to sort a list of numbers in ascending order but with a twist: the ascension should start from a specific cutoff point, after reaching the highest number, the list should go back and list from the lowest number up to the cutoff point.<br>\nI will call this ‚Äúsplit sort‚Äù for lack of a better term.</p>\n<p>Some code to demonstrate:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sortFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">cutoff</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token function\">sortFn</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [5,6,7,8,9,10,1,2,3,4]</span></code></pre>\n<p>The question is how to implement <code>sortFn</code>.</p>\n<h2 id=\"the-simple-solution\" tabindex=\"-1\">The simple solution <a class=\"direct-link\" href=\"#the-simple-solution\">#</a></h2>\n<p>After some consideration most people would come up with code similar to this:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sortFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">cutoff</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">>=</span> cutoff <span class=\"token operator\">&amp;&amp;</span> b <span class=\"token operator\">>=</span> cutoff <span class=\"token operator\">||</span> a <span class=\"token operator\">&lt;</span> cutoff <span class=\"token operator\">&amp;&amp;</span> b <span class=\"token operator\">&lt;</span> cutoff<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> b <span class=\"token operator\">-</span> a\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><em>In words:</em></p>\n<blockquote>\n<p>If both numbers are either before of after the cutoff point -&gt; sort ascending, otherwise, i.e. the 2 numbers live on differing sides of the cutoff point -&gt; sort descending.</p>\n</blockquote>\n<p>This is pretty elegant.<br>\nBut it it got me thinking: The normal numerical sort can be done with a mathematical expression with no conditionals, can ‚Äúsplit sort‚Äù also be done without using any conditionals? ü§î</p>\n<h2 id=\"the-%E2%80%9Cclever%E2%80%9D-solution\" tabindex=\"-1\">The ‚Äúclever‚Äù solution <a class=\"direct-link\" href=\"#the-%E2%80%9Cclever%E2%80%9D-solution\">#</a></h2>\n<p>After some thought I came up with this solution I would like to share.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sortFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">cutoff</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">(</span>a <span class=\"token operator\">-</span> cutoff <span class=\"token operator\">^</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">-</span> cutoff <span class=\"token operator\">^</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"how-does-it-work%3F\" tabindex=\"-1\">How does it work? <a class=\"direct-link\" href=\"#how-does-it-work%3F\">#</a></h2>\n<p>I first started out by trying to simplify the problem. I came up with the following:</p>\n<p>Let us deduct <code>cutoff</code> from each number in the list. This will give us a list where all numbers above <code>cutoff</code> are positive and all numbers below are negative.<br>\nThis allows us to rephrase the problem as follows:</p>\n<blockquote>\n<p>Sort the list in ascending order, but consider all negatives to be of higher value than positives.</p>\n</blockquote>\n<p>This rephrase lit up a light bulb in my head üí°.</p>\n<p>As developers we all have run into the situation where a signed integer overflows and suddenly your very large positive number becomes a very low negative number ü§ï.<br>\ne.g. adding 1 to the maximum value that an <code>int32</code> can hold (2147483647) will return -2147483648. This is due to the way modern computers store signed numbers using the <a href=\"https://en.wikipedia.org/wiki/Two's_complement\">Two‚Äôs complement</a>) system.</p>\n<p>Let us look at the bit layout of signed integers using the 2‚Äôs complement system. For simplicity we will look at a single byte number (I am assuming the reader is familiar with the basic binary counting system so I won‚Äôt explaining how bit patterns represent values):</p>\n<ul>\n<li>Zero value: <code>00000000</code></li>\n<li>Lowest positive number: <code>00000001</code>. The zeroed out leftmost bit (the ‚Äúsign bit‚Äù) is a flag that tells us that this is a positive number. The seven other bits represent the value which is <code>1</code> in this case.</li>\n<li>Highest positive number: <code>01111111</code> . The zeroed out leftmost bit (the ‚Äúsign bit‚Äù) is a flag that tells us that this is still a positive number, the seven remaining bits represent the number `127``, the highest number a signed byte can represent.</li>\n<li>Lowest negative number: <code>10000000</code>. The first bit is set to <code>1</code> to signify a negative number. The other bits are set to zero, this represents the lowest negative number a signed byte can represent: -128 (the lowest negative is always equal to the highest positive + <code>1</code>). Each successive bit pattern represents the next negative number until we climb back up to zero. The fact the zero lives on the positive side of the fence allows 1 more negative magnitude than positive.</li>\n</ul>\n<h3 id=\"what-does-all-this-mean-for-us%3F\" tabindex=\"-1\">What does all this mean for us? <a class=\"direct-link\" href=\"#what-does-all-this-mean-for-us%3F\">#</a></h3>\n<p>We all know that negative numbers have a lower value than positive numbers, and so does the computer‚Äôs processor. But‚Ä¶ the exact same bits can also represent an <em>unsigned number</em> and then... the previously low negative numbers will suddenly become high value positive numbers üò≤. The computer‚Äôs CPU also knows that. The CPU knows how to do signed math and unsigned math.</p>\n<p>In other words: (when peering through ‚Äúunsigned glasses üòé‚Äù) negative numbers begin from where positive numbers end‚Ä¶</p>\n<h3 id=\"javascript%E2%80%99s-numbers\" tabindex=\"-1\">Javascript‚Äôs <code>Number</code>s <a class=\"direct-link\" href=\"#javascript%E2%80%99s-numbers\">#</a></h3>\n<p>In Javascript <em>all</em> numbers are represented as 64 bit floating point numbers. However, when doing binary bitwise operations the number is first coerced to a 32 bit integer.<br>\nThe coercion will maintain the valence (‚Äúsign‚Äù) but truncate the the value to 32 bits.<br>\nAfter the operation, the resulting bits are converted back into 64 bit floating point numbers again maintaining the valence.<br>\nAll mathematical operations operate on the resulting 64 bit number.</p>\n<h3 id=\"the-solution\" tabindex=\"-1\">The solution <a class=\"direct-link\" href=\"#the-solution\">#</a></h3>\n<p>Let us exploit this to solve our problem. To recap: We want to sort numbers in ascending order, but considering all negative numbers as higher valued than positive numbers.</p>\n<p>To do this I came up with the above method. Let us step through the code:</p>\n<ul>\n<li><code>a - cutoff</code> - deduct the value of <code>cutoff</code> from the original number.</li>\n<li><code>1 &lt;&lt; 31</code> - create a 32 bit pattern (mask) where only the leftmost bit is set to one (remember: bitwise operations operate on 32 bits).</li>\n<li>Take the right and left values and smush them together (that‚Äôs a technical term üòâ) using the XOR operator. This has the effect of flipping the sign bit while leaving the other bits alone.</li>\n<li>Do this to both <code>a</code> and <code>b</code></li>\n<li>Do a mathematical operation (minus) on the numbers, this will coerce the bit pattern back into a number, <em>respecting the sign bit</em><br>\nHaving flipped the sign bit, this will transpose a negative number from the negative realm to the positive realm and vice versa for positive numbers. Note: This is <em>transposition</em> not <em>negation</em> i.e. the number moves 2147483648 positions up or down the scale, without maintaining its magnitude (1 becomes -2147483647).</li>\n<li>Seeing as the previously negative numbers now have a higher value than the previous positive numbers, we can go ahead and use the regular <code>a - b</code></li>\n</ul>\n<p>The end :)</p>\n",
      "date_published": "2023-07-16T00:00:00Z"
    },{
      "id": "https://yossizahn.github.io/tech-blog/posts/is-2-days-ago-beautiful/",
      "url": "https://yossizahn.github.io/tech-blog/posts/is-2-days-ago-beautiful/",
      "title": "Is `2.days.ago` a beautiful way of expressing a relative date?",
      "content_html": "<p>A common scenario: You need to calculate a date as a value relative to the current date.</p>\n<p>Using the popular (albeit <a href=\"https://momentjs.com/docs/#/-project-status/\">somewhat deprecated</a>) <a href=\"https://momentjs.com/\">moment.js</a>, this can be expressed as follows:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> twoDaysAgo <span class=\"token operator\">=</span> <span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'days'</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Nice. Readable. Sufficient.</p>\n<p>I came across this curious Ruby snippet recently:</p>\n<pre class=\"language-ruby\"><code class=\"language-ruby\">user <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>\n  <span class=\"token symbol\">email</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'user@example.com'</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token symbol\">trial_ends_at</span><span class=\"token operator\">:</span> <span class=\"token number\">30.</span>days<span class=\"token punctuation\">.</span>from_now\n<span class=\"token punctuation\">)</span></code></pre>\n<p>Ruby on Rails users may find this code somewhat familiar. For me this came as a big surprise.</p>\n<p>After the initial double take, I tried understanding how this code actually works.<br>\n<em>There is no way that Ruby-core offers <code>days</code> as a method on integers. That would just be too ludicrous to imagine.</em></p>\n<p>Turns out, that Ruby allows (encourages?) extending native types, <em>and</em> this seems to be a popular practice. Whereas in JS land - where I live - it is generally frowned upon, in Ruby (on Rails?) it seems to be the norm to extend native types. There is even a utility library specifically for this purpose named <a href=\"https://guides.rubyonrails.org/active_support_core_extensions.html\">Active Support</a>.</p>\n<p>So... the <code>days</code> extension-method of integers, returns a <code>Duration</code> object. And duration objects apparently have an <code>ago</code> method, which returns a <code>Date</code> which is offset <code>$duration</code> amount of time into the past. Exhilarating? Beautiful?</p>\n<p>Listen to what DHH (David Heinemeier Hansson, the creator of RoR) <a href=\"https://rubyonrails.org/doctrine/#optimize-for-programmer-happiness:~:text=But%20both%20decisions%20still%2C%20to%20this,Rails%20after%2012%20years%20of%20service.\">has to say</a> about this style of coding:</p>\n<blockquote>\n<p>... both decisions still, to this day, make me smile. I relish getting to write <code>people.third</code> in a test case or the console. No, that‚Äôs not logical. It‚Äôs not efficient. It may even be pathological. But it continues to make me smile, thus fulfilling the principle and enriching my life, helping to justify my continued involvement with Rails after 12 years of service.</p>\n</blockquote>\n<p>Okay... <code>¬Ø\\_(„ÉÑ)_/¬Ø</code></p>\n<p>In my opinion this style of coding is not only bad, it is also <em>less readable and in a certain sense uglier</em>. &quot;Why?&quot; you may ask. Well in my mind, code is not prose. Code was never intended to be prose. And code that masquerades as prose requires more mental energy to translate it back into the code that it really is.</p>\n<p>Disagree? You're welcome... Let me know in the comments. (Oops... no comments yet...)</p>\n<h2 id=\"update-2023-07-16\" tabindex=\"-1\">Update 2023-07-16 <a class=\"direct-link\" href=\"#update-2023-07-16\">#</a></h2>\n<p>Since I wrote this post <code>2.years.ago</code> üòâ I have become familiar with Smalltalk and clearly Ruby has inherited much from Smalltalk. <a href=\"https://pharo.org/\">Pharo Smalltalk</a> has a method <code>days</code> on numbers which returns a <code>Duration</code>. The <code>ago</code> extension seems to be unique to RoR though.</p>\n",
      "date_published": "2021-03-14T00:00:00Z"
    },{
      "id": "https://yossizahn.github.io/tech-blog/posts/favourite-tools/",
      "url": "https://yossizahn.github.io/tech-blog/posts/favourite-tools/",
      "title": "My favorite tools",
      "content_html": "<h2 id=\"introduction\" tabindex=\"-1\">Introduction <a class=\"direct-link\" href=\"#introduction\">#</a></h2>\n<p>I will try to keep an updated list of my favorite tools here.</p>\n<p>It will be split as follows:</p>\n<ul>\n<li>Tools that I want to give a massive shout-out for. These are tools that I think are amazing and more people should know about them and use them. I will add to each item a short description and some reasons why I like them so much.</li>\n<li>This will be followed by a list of tools I use, grouped by category. These tools are chosen by me as the best in category for the job I use them for. However they are either already very well-known, or just not good enough to deserve a massive shout out.</li>\n</ul>\n<p>Let's start!</p>\n<h2 id=\"big-shout-out-for-these-tools-%F0%9F%93%A2\" tabindex=\"-1\">Big shout out for these tools üì¢ <a class=\"direct-link\" href=\"#big-shout-out-for-these-tools-%F0%9F%93%A2\">#</a></h2>\n<p>These are tools that I think are amazing and more people should know about them and use them. The tools are listed in no particular order.</p>\n<h3 id=\"pdf-xchange-editor-(freemium)\" tabindex=\"-1\"><a href=\"https://www.tracker-software.com/product/pdf-xchange-editor\">PDF-Xchange Editor</a> (Freemium) <a class=\"direct-link\" href=\"#pdf-xchange-editor-(freemium)\">#</a></h3>\n<p><a href=\"https://www.tracker-software.com/product/pdf-xchange-editor\">PDF-Xchange Editor</a> from <a href=\"https://www.tracker-software.com/\">Tracker Software</a> is hands-down my favorite PDF Editor.</p>\n<p>I like it because:</p>\n<ul>\n<li>It is pretty, light-weight, featureful and very easy to use.</li>\n<li>It is actively maintained &amp; developed.</li>\n<li>Tracker's customer support is something I have not seen anywhere else. The support personal are  knowledgeable, friendly and very responsive. No question in the <a href=\"https://forum.tracker-software.com/viewforum.php?f=50\">support forum</a> is left unanswered, no email is ignored. Just overall amazing.</li>\n<li>They have a buy-once licensing scheme instead of a subscription model.</li>\n</ul>\n<h3 id=\"everything-(free%2C-proprietary)\" tabindex=\"-1\"><a href=\"https://www.voidtools.com/\">Everything</a> (Free, Proprietary) <a class=\"direct-link\" href=\"#everything-(free%2C-proprietary)\">#</a></h3>\n<p><a href=\"https://www.voidtools.com/\">Everything</a> is an amazing file search tool from <a href=\"https://www.voidtools.com/\">voidtools</a>. Now, I would have thought (and still do think so...) that Everything is a terrible name for a tool (&quot;Hey, have you heard of everything?&quot;, &quot;Heard of what??? üòï&quot;). But apparently it is good enough to come out first in a <a href=\"https://www.google.com/search?q=Everything\">Google search</a> for the word &quot;everything&quot;.</p>\n<p>My favorite use for it, is something it wasn't designed for. I</p>\n<p>I like it because:</p>\n<ul>\n<li>It is very light-weight, extremely fast and very featureful.</li>\n<li>It is actively maintained and seems to be of very high quality code.</li>\n</ul>\n<h3 id=\"process-hacker-(open-source)\" tabindex=\"-1\"><a href=\"https://processhacker.sourceforge.io/nightly.php\">Process Hacker</a> (Open source) <a class=\"direct-link\" href=\"#process-hacker-(open-source)\">#</a></h3>\n<h3 id=\"ranger-(open-source)\" tabindex=\"-1\"><a href=\"https://ranger.github.io/\">Ranger</a> (Open source) <a class=\"direct-link\" href=\"#ranger-(open-source)\">#</a></h3>\n<h3 id=\"fork-(proprietary)\" tabindex=\"-1\"><a href=\"https://fork.dev/\">Fork</a> (Proprietary) <a class=\"direct-link\" href=\"#fork-(proprietary)\">#</a></h3>\n<h3 id=\"windows-terminal-(open-source)\" tabindex=\"-1\">Windows Terminal (Open source) <a class=\"direct-link\" href=\"#windows-terminal-(open-source)\">#</a></h3>\n<h2 id=\"mini-shout-out-for-these%3A\" tabindex=\"-1\">Mini shout out for these: <a class=\"direct-link\" href=\"#mini-shout-out-for-these%3A\">#</a></h2>\n<h3 id=\"7-zip\" tabindex=\"-1\">7-zip <a class=\"direct-link\" href=\"#7-zip\">#</a></h3>\n<h3 id=\"clink\" tabindex=\"-1\">Clink <a class=\"direct-link\" href=\"#clink\">#</a></h3>\n<h3 id=\"tableplus\" tabindex=\"-1\">TablePlus <a class=\"direct-link\" href=\"#tableplus\">#</a></h3>\n<h3 id=\"paint.net\" tabindex=\"-1\"><a href=\"http://Paint.net\">Paint.net</a> <a class=\"direct-link\" href=\"#paint.net\">#</a></h3>\n<h2 id=\"the-full-unabridged-list-of-stuff-i-use\" tabindex=\"-1\">The full unabridged list of stuff I use <a class=\"direct-link\" href=\"#the-full-unabridged-list-of-stuff-i-use\">#</a></h2>\n<p><em>to be continued...</em></p>\n",
      "date_published": "2021-03-13T00:00:00Z"
    },{
      "id": "https://yossizahn.github.io/tech-blog/posts/hello-world/",
      "url": "https://yossizahn.github.io/tech-blog/posts/hello-world/",
      "title": "Hi üëã",
      "content_html": "<p>An empty post...<br>\nOne day I may write something...</p>\n",
      "date_published": "2021-03-11T00:00:00Z"
    }
  ]
}
